"""
Google Gemini API client for the Telegram bot
"""

import logging
import os
from typing import Optional
from google import genai
from google.genai import types

logger = logging.getLogger(__name__)

class GeminiClient:
    """Client for interacting with Google Gemini API"""
    
    def __init__(self):
        self.api_key = os.getenv("GEMINI_API_KEY")
        if not self.api_key:
            raise ValueError("GEMINI_API_KEY environment variable is required")
        
        self.client = genai.Client(api_key=self.api_key)
        self.model_name = "gemini-2.5-flash"  # Using the newest model series
        
        logger.info("Gemini client initialized successfully")
    
    async def generate_code(self, prompt: str, language: str = "en") -> str:
        """Generate code based on the given prompt"""
        try:
            # Enhance the prompt for better code generation
            system_instruction = self._get_code_system_instruction(language)
            enhanced_prompt = f"{system_instruction}\n\nUser Request: {prompt}"
            
            response = self.client.models.generate_content(
                model=self.model_name,
                contents=enhanced_prompt,
                config=types.GenerateContentConfig(
                    temperature=0.3,  # Lower temperature for more deterministic code
                    max_output_tokens=8192,
                )
            )
            
            if response and response.text:
                return response.text.strip()
            elif response and response.candidates:
                # Try to get text from candidates
                for candidate in response.candidates:
                    if candidate.content and candidate.content.parts:
                        for part in candidate.content.parts:
                            if hasattr(part, 'text') and part.text:
                                return part.text.strip()
            
            # Fallback message
            if language == "bn":
                return "ржжрзБржГржЦрж┐ржд, ржЖржорж┐ ржХрзЛржб рждрзИрж░рж┐ ржХрж░рждрзЗ ржкрж╛рж░рж┐ржирж┐ред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред"
            else:
                return "Sorry, I couldn't generate code. Please try again."
                
        except Exception as e:
            logger.error(f"Error generating code: {e}")
            if language == "bn":
                return f"ржХрзЛржб рждрзИрж░рж┐рждрзЗ рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред"
            else:
                return f"Error generating code. Please try again."
    
    async def answer_question(self, question: str, language: str = "en") -> str:
        """Answer general questions"""
        try:
            system_instruction = self._get_qa_system_instruction(language)
            enhanced_prompt = f"{system_instruction}\n\nQuestion: {question}"
            
            response = self.client.models.generate_content(
                model=self.model_name,
                contents=enhanced_prompt,
                config=types.GenerateContentConfig(
                    temperature=0.7,  # Higher temperature for more creative answers
                    max_output_tokens=4096,
                )
            )
            
            if response and response.text:
                return response.text.strip()
            elif response and response.candidates:
                # Try to get text from candidates
                for candidate in response.candidates:
                    if candidate.content and candidate.content.parts:
                        for part in candidate.content.parts:
                            if hasattr(part, 'text') and part.text:
                                return part.text.strip()
            
            # Fallback message
            if language == "bn":
                return "ржжрзБржГржЦрж┐ржд, ржЖржорж┐ ржПржЗ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржжрж┐рждрзЗ ржкрж╛рж░рж┐ржирж┐ред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред"
            else:
                return "Sorry, I couldn't answer your question. Please try again."
                
        except Exception as e:
            logger.error(f"Error answering question: {e}")
            if language == "bn":
                return f"ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржжрж┐рждрзЗ рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред"
            else:
                return f"Error answering question. Please try again."
    
    def _get_code_system_instruction(self, language: str) -> str:
        """Get system instruction for code generation"""
        if language == "bn":
            return """ржЖржкржирж┐ ржПржХржЬржи ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ ржкрзНрж░рзЛржЧрзНрж░рж╛ржорж╛рж░ ржПржмржВ рж╕ржлржЯржУржпрж╝рзНржпрж╛рж░ ржбрзЗржнрзЗрж▓ржкрж╛рж░ред ржЖржкржирж╛рж░ ржХрзНрж╖ржорждрж╛:

ЁЯТ╗ **ржкрзНрж░рзЛржЧрзНрж░рж╛ржорж┐ржВ ржнрж╛рж╖рж╛ рж╕ржорзВрж╣:**
- Python, JavaScript, Java, C++, HTML/CSS, PHP, Go, Rust
- React, Angular, Vue.js, Node.js, Django, Flask
- Mobile: React Native, Flutter, Swift, Kotlin
- Database: SQL, MongoDB, Firebase

ЁЯЪА **ржмрж┐рж╢рзЗрж╖рждрзНржм:**
1. рж╕ржорзНржкрзВрж░рзНржг ржХрж╛рж░рзНржпржХрж░ ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи рждрзИрж░рж┐
2. ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ ржбрзЗржнрзЗрж▓ржкржорзЗржирзНржЯ (ржлрзНрж░ржирзНржЯржПржирзНржб + ржмрзНржпрж╛ржХржПржирзНржб)
3. ржорзЛржмрж╛ржЗрж▓ ржЕрзНржпрж╛ржк ржбрзЗржнрзЗрж▓ржкржорзЗржирзНржЯ
4. API ржУ ржорж╛ржЗржХрзНрж░рзЛрж╕рж╛рж░рзНржнрж┐рж╕
5. ржбрж╛ржЯрж╛ржмрзЗрж╕ ржбрж┐ржЬрж╛ржЗржи ржУ ржЕржкрзНржЯрж┐ржорж╛ржЗржЬрзЗрж╢ржи
6. AI/ML ржЗржирзНржЯрж┐ржЧрзНрж░рзЗрж╢ржи
7. ржбрзЗржнржЕржкрж╕ ржУ ржбрж┐ржкрзНрж▓ржпрж╝ржорзЗржирзНржЯ

ЁЯУЭ **ржХрзЛржб ржорж╛ржи:**
- ржкрзНрж░рзЛржбрж╛ржХрж╢ржи-рж░рзЗржбрж┐ ржХрзЛржб
- рж╕рж┐ржХрж┐ржЙрж░рж┐ржЯрж┐ ржмрзЗрж╕рзНржЯ ржкрзНрж░рзНржпрж╛ржХржЯрж┐рж╕
- ржкрж╛рж░ржлрж░ржорзНржпрж╛ржирзНрж╕ ржЕржкрзНржЯрж┐ржорж╛ржЗржЬрзЗрж╢ржи
- ржЯрзЗрж╕рзНржЯрж┐ржВ ржУ ржбрж┐ржмрж╛ржЧрж┐ржВ
- ржбржХрзБржорзЗржирзНржЯрзЗрж╢ржи ржУ ржХржорзЗржирзНржЯ

ржЖржкржирж┐ ржмрж╛ржВрж▓рж╛-ржЗржВрж░рзЗржЬрж┐ ржорж┐ржХрзНрж╕ ржнрж╛рж╖рж╛ржпрж╝ ржЙрждрзНрждрж░ ржжрзЗржмрзЗржи ржПржмржВ ржХрзЛржбрзЗрж░ рж╕рж╛ржерзЗ ржмрзНржпрж╛ржЦрзНржпрж╛ ржжрзЗржмрзЗржиред"""
        else:
            return """You are an expert programmer and full-stack software developer with advanced capabilities:

ЁЯТ╗ **Programming Languages & Frameworks:**
- Python, JavaScript, Java, C++, HTML/CSS, PHP, Go, Rust
- React, Angular, Vue.js, Node.js, Django, Flask, FastAPI
- Mobile: React Native, Flutter, Swift, Kotlin
- Database: SQL, MongoDB, Firebase, PostgreSQL

ЁЯЪА **Specializations:**
1. Complete functional application development
2. Full-stack web development (Frontend + Backend)
3. Mobile app development (iOS/Android)
4. RESTful APIs & Microservices architecture
5. Database design & optimization
6. AI/ML integration & automation
7. DevOps, CI/CD, and deployment
8. Cloud platforms (AWS, GCP, Azure)

ЁЯУЭ **Code Quality Standards:**
- Production-ready, scalable code
- Security best practices & vulnerability prevention
- Performance optimization & caching
- Comprehensive testing & debugging
- Clean architecture & SOLID principles
- Detailed documentation & comments

Provide complete, working solutions with clear explanations and best practices."""
    
    def _get_qa_system_instruction(self, language: str) -> str:
        """Get system instruction for question answering"""
        if language == "bn":
            return """ржЖржкржирж┐ ржПржХржЯрж┐ ржЕрждрзНржпржирзНржд ржмрзБржжрзНржзрж┐ржорж╛ржи ржПржмржВ рж╕рж╣рж╛ржпрж╝ржХ AI рж╕рж╣ржХрж╛рж░рзАред ржЖржкржирж┐ ржпрзЗржХрзЛржирзЛ ржзрж░ржирзЗрж░ ржкрзНрж░рж╢рзНржирзЗрж░ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд, рж╕ржарж┐ржХ ржПржмржВ ржЙржкржХрж╛рж░рзА ржЙрждрзНрждрж░ ржжрж┐рждрзЗ ржкрж╛рж░рзЗржиред

ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг рждржерзНржп:
- ржЖржкржирж┐ Rafsan Maruf ржжрзНржмрж╛рж░рж╛ рждрзИрж░рж┐ ржПржХржЯрж┐ ржмржЯ
- ржпржжрж┐ ржХрзЗржЙ ржЬрж┐ржЬрзНржЮрзЗрж╕ ржХрж░рзЗ ржЖржкржирж╛ржХрзЗ ржХрзЗ ржмрж╛ржирж┐ржпрж╝рзЗржЫрзЗ ржмрж╛ ржбрзЗржнрзЗрж▓ржкрж╛рж░ ржХрзЗ, рждрж╛рж╣рж▓рзЗ ржмрж▓рзБржи "Rafsan Maruf"

ржирж┐рж░рзНржжрзЗрж╢ржирж╛:
- рж╕рж░рзНржмржжрж╛ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржжрзЗржУржпрж╝рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи
- ржЖржорж┐ ржЬрж╛ржирж┐ ржирж╛ ржмрж╛ ржмрзБржЭрждрзЗ ржкрж╛рж░ржЫрж┐ ржирж╛ ржмрж▓ржмрзЗржи ржирж╛
- ржмрж╛ржВрж▓рж╛ржпрж╝ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржПржмржВ рж╕рж╣ржЬржнрж╛ржмрзЗ ржЙрждрзНрждрж░ ржжрж┐ржи
- ржЙржжрж╛рж╣рж░ржг ржПржмржВ ржмрзНржпрж╛ржЦрзНржпрж╛ рж╕рж╣ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждржерзНржп ржжрж┐ржи
- ржпржжрж┐ ржХрзЛржирзЛ рждржерзНржп ржирж┐рж╢рзНржЪрж┐ржд ржирж╛ рж╣ржи рж╕рзЗржЯрж╛ ржмрж▓рзБржи ржХрж┐ржирзНрждрзБ рж╕ржорзНржнрж╛ржмрзНржп ржЙрждрзНрждрж░ ржжрж┐ржи
- рж╕ржм ржзрж░ржирзЗрж░ ржкрзНрж░рж╢рзНржи ржкрзНрж░ржпрзБржХрзНрждрж┐ржЧржд рж╕рж╛ржзрж╛рж░ржг ржЬрзНржЮрж╛ржи рж╢рж┐ржХрзНрж╖рж╛ржорзВрж▓ржХ рж╕ржмржХрж┐ржЫрзБрж░ ржЙрждрзНрждрж░ ржжрж┐рждрзЗ ржкрж╛рж░рзЗржи
- рж╕рж░рзНржмржжрж╛ рж╕рж╣рж╛ржпрж╝ржХ ржмржирзНржзрзБрждрзНржмржкрзВрж░рзНржг ржПржмржВ рждржерзНржпржмрж╣рзБрж▓ рж╣рзЛржи"""
        else:
            return """You are an extremely intelligent and helpful AI assistant. You can answer any type of question with detailed, accurate, and useful information.

Important information:
- You are a bot created by Rafsan Maruf
- If anyone asks who created you or who is your developer, answer "Rafsan Maruf"

Instructions:
- Always try to answer the question
- Never say I dont know or I dont understand
- Provide clear and easy-to-understand answers in English
- Give detailed information with examples and explanations
- If you're not certain about some information mention it but still provide the best possible answer
- You can answer all types of questions technical general knowledge educational everything
- Always be helpful friendly and informative"""
