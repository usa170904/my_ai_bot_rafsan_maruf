"""
Language detection and handling for multilingual support
"""

import logging
from typing import Optional
import re

logger = logging.getLogger(__name__)

class LanguageHandler:
    """Handle language detection and multilingual messages"""
    
    def __init__(self):
        # Bengali Unicode character ranges
        self.bengali_pattern = re.compile(r'[\u0980-\u09FF]+')
        
        # Code-related keywords in both languages
        self.code_keywords = {
            'en': [
                'code', 'program', 'function', 'class', 'variable', 'algorithm',
                'python', 'javascript', 'java', 'html', 'css', 'react', 'node',
                'app', 'website', 'database', 'api', 'framework', 'library',
                'build', 'develop', 'write', 'generate', 'make',
                'flutter', 'android', 'ios', 'machine learning', 'ai', 'ml',
                'django', 'flask', 'fastapi', 'express', 'vue', 'angular',
                'mongodb', 'postgresql', 'mysql', 'firebase', 'aws', 'docker',
                'kubernetes', 'microservice', 'blockchain', 'web3', 'smart contract'
            ],
            'bn': [
                'ржХрзЛржб', 'ржкрзНрж░рзЛржЧрзНрж░рж╛ржо', 'ржлрж╛ржВрж╢ржи', 'ржХрзНрж▓рж╛рж╕', 'ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓', 'ржЕрзНржпрж╛рж▓ржЧрж░рж┐ржжржо',
                'ржкрж╛ржЗржержи', 'ржЬрж╛ржнрж╛рж╕рзНржХрзНрж░рж┐ржкрзНржЯ', 'ржЬрж╛ржнрж╛', 'ржПржЗржЪржЯрж┐ржПржоржПрж▓', 'рж╕рж┐ржПрж╕ржПрж╕',
                'ржЕрзНржпрж╛ржк', 'ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ', 'ржбрж╛ржЯрж╛ржмрзЗрж╕', 'ржПржкрж┐ржЖржЗ', 'ржлрзНрж░рзЗржоржУржпрж╝рж╛рж░рзНржХ',
                'ржмрж╛ржирж╛ржУ', 'рж▓рж┐ржЦ', 'ржХрж░рзЛ', 'ржмрж╛ржирж╛ржирзЛ', 'рж▓рзЗржЦрж╛', 'ржбрзЗржнрзЗрж▓ржк',
                'ржлрзНрж▓рж╛ржЯрж╛рж░', 'ржЕрзНржпрж╛ржирзНржбрзНрж░ржпрж╝рзЗржб', 'ржЖржЗржУржПрж╕', 'ржорзЗрж╢рж┐ржи рж▓рж╛рж░рзНржирж┐ржВ', 'ржПржЖржЗ',
                'ржЬрзНржпрж╛ржЩрзНржЧрзЛ', 'ржлрзНрж▓рж╛рж╕рзНржХ', 'ржПржХрзНрж╕ржкрзНрж░рзЗрж╕', 'ржнрж┐ржЙ', 'ржЕрзНржпрж╛ржЩрзНржЧрзБрж▓рж╛рж░',
                'ржоржЩрзНржЧрзЛржбрж┐ржмрж┐', 'ржкрзЛрж╕рзНржЯржЧрзНрж░рзЗрж╕', 'ржорж╛ржЗржПрж╕ржХрж┐ржЙржПрж▓', 'ржлрж╛ржпрж╝рж╛рж░ржмрзЗрж╕',
                'ржбржХрж╛рж░', 'ржХрзБржмрж╛рж░ржирзЗржЯрж┐рж╕', 'ржорж╛ржЗржХрзНрж░рзЛрж╕рж╛рж░рзНржнрж┐рж╕', 'ржмрзНрж▓ржХржЪрзЗржЗржи'
            ]
        }
        
        # Predefined messages in both languages
        self.messages = {
            'welcome': {
                'en': """ЁЯдЦ *Welcome to Multilingual AI Bot!*

I'm your advanced AI assistant powered by Google Gemini! I can help you with:

ЁЯФз *Code Generation*
тАв Any programming language
тАв App development
тАв Website creation
тАв Problem solving

ЁЯТб *Question Answering*
тАв Technical questions
тАв General knowledge
тАв Educational content
тАв Programming help

ЁЯМР *Languages Supported*
тАв English
тАв ржмрж╛ржВрж▓рж╛ (Bengali)

*Commands:*
/code - Generate code
/app - Create app code
/web - Create website code
/ask - Ask any question
/help - Show this help
/lang - Language info
/status - Bot status

Just type your question or request in any language!""",
                
                'bn': """ЁЯдЦ *ржмрж╣рзБржнрж╛рж╖рж┐ржХ AI ржмржЯ ржП рж╕рзНржмрж╛ржЧрждржо!*

ржЖржорж┐ Google Gemini ржжрзНржмрж╛рж░рж╛ ржЪрж╛рж▓рж┐ржд ржЖржкржирж╛рж░ ржЙржирзНржиржд AI рж╕рж╣рж╛ржпрж╝ржХ! ржЖржорж┐ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐:

ЁЯФз *ржХрзЛржб рждрзИрж░рж┐*
тАв ржпрзЗржХрзЛржирзЛ ржкрзНрж░рзЛржЧрзНрж░рж╛ржорж┐ржВ ржнрж╛рж╖рж╛
тАв ржЕрзНржпрж╛ржк ржбрзЗржнрзЗрж▓ржкржорзЗржирзНржЯ
тАв ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ рждрзИрж░рж┐
тАв рж╕ржорж╕рзНржпрж╛ рж╕ржорж╛ржзрж╛ржи

ЁЯТб *ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░*
тАв ржкрзНрж░ржпрзБржХрзНрждрж┐ржЧржд ржкрзНрж░рж╢рзНржи
тАв рж╕рж╛ржзрж╛рж░ржг ржЬрзНржЮрж╛ржи
тАв рж╢рж┐ржХрзНрж╖рж╛ржорзВрж▓ржХ ржмрж┐рж╖ржпрж╝
тАв ржкрзНрж░рзЛржЧрзНрж░рж╛ржорж┐ржВ рж╕рж╛рж╣рж╛ржпрзНржп

ЁЯМР *рж╕ржорж░рзНржерж┐ржд ржнрж╛рж╖рж╛*
тАв English
тАв ржмрж╛ржВрж▓рж╛

*ржХржорж╛ржирзНржб рж╕ржорзВрж╣:*
/code - ржХрзЛржб рждрзИрж░рж┐ ржХрж░рзБржи
/app - ржЕрзНржпрж╛ржк ржХрзЛржб рждрзИрж░рж┐ ржХрж░рзБржи
/web - ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ ржХрзЛржб рждрзИрж░рж┐ ржХрж░рзБржи
/ask - ржпрзЗржХрзЛржирзЛ ржкрзНрж░рж╢рзНржи ржХрж░рзБржи
/help - ржПржЗ рж╕рж╛рж╣рж╛ржпрзНржп ржжрзЗржЦрзБржи
/lang - ржнрж╛рж╖рж╛рж░ рждржерзНржп
/status - ржмржЯ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕

ржпрзЗржХрзЛржирзЛ ржнрж╛рж╖рж╛ржпрж╝ ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржи ржмрж╛ ржЕржирзБрж░рзЛржз ржЯрж╛ржЗржк ржХрж░рзБржи!"""
            },
            
            'help': {
                'en': """ЁЯФз *Bot Commands & Usage*

*Code Generation:*
тАв `/code <description>` - Generate any code
тАв `/app <app idea>` - Create mobile/desktop app code
тАв `/web <website idea>` - Create website code

*Question Answering:*
тАв `/ask <question>` - Ask any question
тАв Just type your question directly

*Other Commands:*
тАв `/lang` - Language information
тАв `/status` - Check bot status
тАв `/help` - Show this help

*Examples:*
тАв `/code create a calculator in python`
тАв `/app todo list app in react native`
тАв `/web responsive portfolio website`
тАв `/ask what is machine learning?`

*Tips:*
тАв Be specific in your requests
тАв You can mix Bengali and English
тАв The bot understands context
тАв Free tier limits apply""",
                
                'bn': """ЁЯФз *ржмржЯ ржХржорж╛ржирзНржб ржУ ржмрзНржпржмрж╣рж╛рж░*

*ржХрзЛржб рждрзИрж░рж┐:*
тАв `/code <ржмрж░рзНржгржирж╛>` - ржпрзЗржХрзЛржирзЛ ржХрзЛржб рждрзИрж░рж┐ ржХрж░рзБржи
тАв `/app <ржЕрзНржпрж╛ржк ржЖржЗржбрж┐ржпрж╝рж╛>` - ржорзЛржмрж╛ржЗрж▓/ржбрзЗрж╕рзНржХржЯржк ржЕрзНржпрж╛ржк ржХрзЛржб
тАв `/web <ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ ржЖржЗржбрж┐ржпрж╝рж╛>` - ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ ржХрзЛржб рждрзИрж░рж┐

*ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░:*
тАв `/ask <ржкрзНрж░рж╢рзНржи>` - ржпрзЗржХрзЛржирзЛ ржкрзНрж░рж╢рзНржи ржХрж░рзБржи
тАв рж╕рж░рж╛рж╕рж░рж┐ ржкрзНрж░рж╢рзНржи ржЯрж╛ржЗржк ржХрж░рзБржи

*ржЕржирзНржпрж╛ржирзНржп ржХржорж╛ржирзНржб:*
тАв `/lang` - ржнрж╛рж╖рж╛рж░ рждржерзНржп
тАв `/status` - ржмржЯ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржжрзЗржЦрзБржи
тАв `/help` - ржПржЗ рж╕рж╛рж╣рж╛ржпрзНржп ржжрзЗржЦрзБржи

*ржЙржжрж╛рж╣рж░ржг:*
тАв `/code ржкрж╛ржЗржержирзЗ ржХрзНржпрж╛рж▓ржХрзБрж▓рзЗржЯрж░ ржмрж╛ржирж╛ржУ`
тАв `/app рж░рж┐ржЕрзНржпрж╛ржХрзНржЯ ржирзЗржЯрж┐ржнрзЗ ржЯрзБржбрзБ рж▓рж┐рж╕рзНржЯ ржЕрзНржпрж╛ржк`
тАв `/web рж░рзЗрж╕ржкржирзНрж╕рж┐ржн ржкрзЛрж░рзНржЯржлрзЛрж▓рж┐ржУ ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ`
тАв `/ask ржорзЗрж╢рж┐ржи рж▓рж╛рж░рзНржирж┐ржВ ржХрж┐?`

*ржЯрж┐ржкрж╕:*
тАв ржЖржкржирж╛рж░ ржЕржирзБрж░рзЛржзрзЗ рж╕рзБржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╣ржи
тАв ржмрж╛ржВрж▓рж╛ ржУ ржЗржВрж░рзЗржЬрж┐ ржорж┐рж╢рж┐ржпрж╝рзЗ рж▓рж┐ржЦрждрзЗ ржкрж╛рж░рзЗржи
тАв ржмржЯ ржкрзНрж░рж╕ржЩрзНржЧ ржмрзБржЭрждрзЗ ржкрж╛рж░рзЗ
тАв ржлрзНрж░рж┐ ржЯрж┐ржпрж╝рж╛рж░ рж╕рзАржорж╛ ржкрзНрж░ржпрзЛржЬрзНржп"""
            },
            
            'code_usage': {
                'en': "ЁЯУЭ Usage: `/code <your code request>`\n\nExample: `/code create a python function to sort a list`",
                'bn': "ЁЯУЭ ржмрзНржпржмрж╣рж╛рж░: `/code <ржЖржкржирж╛рж░ ржХрзЛржб ржЕржирзБрж░рзЛржз>`\n\nржЙржжрж╛рж╣рж░ржг: `/code ржкрж╛ржЗржержирзЗ рж▓рж┐рж╕рзНржЯ рж╕рж░рзНржЯ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи ржмрж╛ржирж╛ржУ`"
            },
            
            'app_usage': {
                'en': "ЁЯУ▒ Usage: `/app <your app idea>`\n\nExample: `/app create a todo list app in React Native`",
                'bn': "ЁЯУ▒ ржмрзНржпржмрж╣рж╛рж░: `/app <ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржк ржЖржЗржбрж┐ржпрж╝рж╛>`\n\nржЙржжрж╛рж╣рж░ржг: `/app рж░рж┐ржЕрзНржпрж╛ржХрзНржЯ ржирзЗржЯрж┐ржнрзЗ ржЯрзБржбрзБ рж▓рж┐рж╕рзНржЯ ржЕрзНржпрж╛ржк ржмрж╛ржирж╛ржУ`"
            },
            
            'web_usage': {
                'en': "ЁЯМР Usage: `/web <your website idea>`\n\nExample: `/web create a responsive portfolio website`",
                'bn': "ЁЯМР ржмрзНржпржмрж╣рж╛рж░: `/web <ржЖржкржирж╛рж░ ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ ржЖржЗржбрж┐ржпрж╝рж╛>`\n\nржЙржжрж╛рж╣рж░ржг: `/web рж░рзЗрж╕ржкржирзНрж╕рж┐ржн ржкрзЛрж░рзНржЯржлрзЛрж▓рж┐ржУ ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ ржмрж╛ржирж╛ржУ`"
            },
            
            'ask_usage': {
                'en': "тЭУ Usage: `/ask <your question>`\n\nExample: `/ask what is artificial intelligence?`",
                'bn': "тЭУ ржмрзНржпржмрж╣рж╛рж░: `/ask <ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржи>`\n\nржЙржжрж╛рж╣рж░ржг: `/ask ржХрзГрждрзНрж░рж┐ржо ржмрзБржжрзНржзрж┐ржорждрзНрждрж╛ ржХрж┐?`"
            },
            
            'language_info': {
                'en': """ЁЯМР *Language Support*

*Supported Languages:*
тАв English
тАв ржмрж╛ржВрж▓рж╛ (Bengali)

*Features:*
тАв Automatic language detection
тАв Mixed language support
тАв Context-aware responses
тАв Cultural adaptation

*Tips:*
тАв You can mix Bengali and English in the same message
тАв The bot will respond in the appropriate language
тАв Technical terms are explained in both languages""",
                
                'bn': """ЁЯМР *ржнрж╛рж╖рж╛ рж╕рж╛ржкрзЛрж░рзНржЯ*

*рж╕ржорж░рзНржерж┐ржд ржнрж╛рж╖рж╛:*
тАв English
тАв ржмрж╛ржВрж▓рж╛

*ржмрзИрж╢рж┐рж╖рзНржЯрзНржп:*
тАв рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ ржнрж╛рж╖рж╛ рж╢ржирж╛ржХрзНрждржХрж░ржг
тАв ржорж┐рж╢рзНрж░ ржнрж╛рж╖рж╛ рж╕рж╛ржкрзЛрж░рзНржЯ
тАв ржкрзНрж░рж╕ржЩрзНржЧ-рж╕ржЪрзЗрждржи ржЙрждрзНрждрж░
тАв рж╕рж╛ржВрж╕рзНржХрзГрждрж┐ржХ ржЕржнрж┐ржпрзЛржЬржи

*ржЯрж┐ржкрж╕:*
тАв ржПржХржЗ ржмрж╛рж░рзНрждрж╛ржпрж╝ ржмрж╛ржВрж▓рж╛ ржУ ржЗржВрж░рзЗржЬрж┐ ржорж┐рж╢рж┐ржпрж╝рзЗ рж▓рж┐ржЦрждрзЗ ржкрж╛рж░рзЗржи
тАв ржмржЯ ржЙржкржпрзБржХрзНржд ржнрж╛рж╖рж╛ржпрж╝ ржЙрждрзНрждрж░ ржжрзЗржмрзЗ
тАв ржкрзНрж░ржпрзБржХрзНрждрж┐ржЧржд рж╢ржмрзНржж ржжрзБржЗ ржнрж╛рж╖рж╛ржпрж╝ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рж╛ рж╣ржпрж╝"""
            },
            
            'status': {
                'en': """тЬЕ *Bot Status*

ЁЯдЦ *AI Model:* Google Gemini 2.5 Flash
ЁЯМР *Languages:* English, Bengali
ЁЯФз *Features:* Code Generation, Q&A, App Development
тЪб *Status:* Online and Ready
ЁЯЖУ *Tier:* Free (Rate Limited)
ЁЯФТ *Security:* End-to-end processing
ЁЯСитАНЁЯТ╗ *Created by:* Rafsan Maruf

*Capabilities:*
тАв Multi-language code generation
тАв Advanced question answering
тАв App and website development
тАв Technical problem solving""",
                
                'bn': """тЬЕ *ржмржЯ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕*

ЁЯдЦ *AI ржоржбрзЗрж▓:* Google Gemini 2.5 Flash
ЁЯМР *ржнрж╛рж╖рж╛:* ржЗржВрж░рзЗржЬрж┐, ржмрж╛ржВрж▓рж╛
ЁЯФз *ржмрзИрж╢рж┐рж╖рзНржЯрзНржп:* ржХрзЛржб рждрзИрж░рж┐, ржкрзНрж░рж╢рзНржирзЛрждрзНрждрж░, ржЕрзНржпрж╛ржк ржбрзЗржнрзЗрж▓ржкржорзЗржирзНржЯ
тЪб *рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕:* ржЕржирж▓рж╛ржЗржи ржПржмржВ ржкрзНрж░рж╕рзНрждрзБржд
ЁЯЖУ *ржЯрж┐ржпрж╝рж╛рж░:* ржлрзНрж░рж┐ (рж░рзЗржЯ рж▓рж┐ржорж┐ржЯрзЗржб)
ЁЯФТ *ржирж┐рж░рж╛ржкрждрзНрждрж╛:* ржПржирзНржб-ржЯрзБ-ржПржирзНржб ржкрзНрж░рж╕рзЗрж╕рж┐ржВ
ЁЯСитАНЁЯТ╗ *рждрзИрж░рж┐ ржХрж░рзЗржЫрзЗржи:* Rafsan Maruf

*рж╕ржХрзНрж╖ржорждрж╛:*
тАв ржмрж╣рзБржнрж╛рж╖рж┐ржХ ржХрзЛржб рждрзИрж░рж┐
тАв ржЙржирзНржиржд ржкрзНрж░рж╢рзНржирзЛрждрзНрждрж░
тАв ржЕрзНржпрж╛ржк ржПржмржВ ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ ржбрзЗржнрзЗрж▓ржкржорзЗржирзНржд
тАв ржкрзНрж░ржпрзБржХрзНрждрж┐ржЧржд рж╕ржорж╕рзНржпрж╛ рж╕ржорж╛ржзрж╛ржи"""
            },
            
            'rate_limit': {
                'en': "тП░ You're sending requests too quickly. Please wait a moment and try again.",
                'bn': "тП░ ржЖржкржирж┐ ржЦрзБржм рждрж╛ржбрж╝рж╛рждрж╛ржбрж╝рж┐ ржЕржирзБрж░рзЛржз ржкрж╛ржарж╛ржЪрзНржЫрзЗржиред ржПржХржЯрзБ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред"
            },
            
            'error': {
                'en': "тЭМ Sorry, there was an error processing your request. Please try again later.",
                'bn': "тЭМ ржжрзБржГржЦрж┐ржд, ржЖржкржирж╛рж░ ржЕржирзБрж░рзЛржз ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржХрж░рждрзЗ рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗред ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред"
            }
        }
    
    def detect_user_language(self, user_lang_code: Optional[str]) -> str:
        """Detect user language from Telegram language code"""
        if user_lang_code and user_lang_code.startswith('bn'):
            return 'bn'
        return 'en'
    
    def detect_message_language(self, text: str) -> str:
        """Detect language of a message"""
        if self.bengali_pattern.search(text):
            return 'bn'
        return 'en'
    
    def is_code_request(self, text: str) -> bool:
        """Check if the message is a code-related request"""
        text_lower = text.lower()
        
        # Programming patterns that strongly indicate code requests
        programming_patterns = [
            'def ', 'function ', 'class ', 'import ', 'from ', 'return ',
            'if(', 'else:', 'for(', 'while(', 'try:', 'except:', 'with ',
            '{', '}', '()', '[]', '==', '!=', '&&', '||', '//', '/**',
            '<html>', '<div>', '<script>', 'public class', 'private ',
            'const ', 'let ', 'var ', 'async ', 'await ', 'promise'
        ]
        
        # First check for clear programming patterns
        for pattern in programming_patterns:
            if pattern in text_lower:
                return True
        
        # Check English keywords
        for keyword in self.code_keywords['en']:
            if keyword in text_lower:
                return True
        
        # Check Bengali keywords
        for keyword in self.code_keywords['bn']:
            if keyword in text:
                return True
        
        # Special cases - questions about bot creator/developer should NOT be code requests
        creator_questions = [
            'ржХрзЗ рждрзИрж░рж┐', 'ржХрзЗ ржмрж╛ржирж┐ржпрж╝рзЗржЫрзЗ', 'ржХрзЗ ржбрзЗржнрзЗрж▓ржк', 'ржХрзЗ ржмрж╛ржирж╛ржпрж╝', 'рждрзИрж░рж┐ ржХрж░рзЗржЫрзЗ', 'рждрзИрж░рж┐ ржХрж░ржЫрзЗ',
            'who created', 'who developed', 'who made', 'who built', 'created by', 'developed by'
        ]
        
        for creator_q in creator_questions:
            if creator_q in text_lower or creator_q in text:
                return False
        
        # Special cases - if asking about concepts but not requesting code
        non_code_questions = [
            'what is', 'ржХрж┐', 'ржХрж╛ржХрзЗ ржмрж▓рзЗ', 'explain', 'ржмрзБржЭрж┐ржпрж╝рзЗ', 'meaning',
            'definition', 'рж╕ржВржЬрзНржЮрж╛', 'why', 'ржХрзЗржи', 'how does', 'ржХрж┐ржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ',
            'difference', 'ржкрж╛рж░рзНржержХрзНржп', 'compare', 'рждрзБрж▓ржирж╛'
        ]
        
        # If it's a concept question without clear code request, treat as general question
        for question_type in non_code_questions:
            if question_type in text_lower or question_type in text:
                # But if it also has strong programming keywords, still consider it code
                strong_code_keywords = ['function', 'algorithm', 'program', 'script', 'ржлрж╛ржВрж╢ржи', 'ржЕрзНржпрж╛рж▓ржЧрж░рж┐ржжржо']
                has_strong_code = any(keyword in text_lower or keyword in text for keyword in strong_code_keywords)
                if not has_strong_code:
                    return False
        
        return False
    
    def get_message(self, key: str, language: str) -> str:
        """Get predefined message in specified language"""
        if key in self.messages and language in self.messages[key]:
            return self.messages[key][language]
        
        # Fallback to English if Bengali is not available
        if key in self.messages and 'en' in self.messages[key]:
            return self.messages[key]['en']
        
        return "Message not found"
